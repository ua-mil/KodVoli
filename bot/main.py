import os
import time
import requests
import feedparser
import telebot
import schedule

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = telebot.TeleBot(BOT_TOKEN)
sent_links = set()

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –∑ –ù–ë–£
def get_real_exchange_rates():
    try:
        response = requests.get("https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json")
        data = response.json()
        usd = next((item for item in data if item["cc"] == "USD"), None)
        eur = next((item for item in data if item["cc"] == "EUR"), None)
        if not usd or not eur:
            return "–ö—É—Ä—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—Ä–∞–∑."
        return (
            f"üìÖ –î–∞—Ç–∞: {usd['exchangedate']}\n"
            f"üíµ –î–æ–ª–∞—Ä: {usd['rate']} –≥—Ä–Ω\n"
            f"üí∂ –Ñ–≤—Ä–æ: {eur['rate']} –≥—Ä–Ω\n"
        )
    except Exception as e:
        print(f"[NBU ERROR] {e}")
        return "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç."

# === –ö—É—Ä—Å BTC –∑ Binance
def get_btc_rate():
    try:
        response = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT")
        usd_rate = float(response.json()["price"])
        return f"‚Çø –ë—ñ—Ç–∫–æ–π–Ω: ${usd_rate:,.0f}"
    except Exception as e:
        print(f"[BTC ERROR] {e}")
        return "‚Çø –ë—ñ—Ç–∫–æ–π–Ω: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"

# === –û–± º—î–¥–Ω–∞–Ω–∏–π –∫—É—Ä—Å
def get_rates():
    nbu = get_real_exchange_rates()
    btc = get_btc_rate()
    return f"{nbu}\n{btc}"

# === –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏ –∑ –∫—É—Ä—Å–æ–º
def fetch_and_send_news():
    print("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω...")
    feeds = {
        "–£–ù–Ü–ê–ù": "https://www.unian.ua/rss/index.rss",
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–∞–≤–¥–∞": "https://www.pravda.com.ua/rss/"
    }

    for source, url in feeds.items():
        feed = feedparser.parse(url)
        for entry in feed.entries[:1]:
            if entry.link not in sent_links:
                sent_links.add(entry.link)

                title = entry.title
                summary = entry.summary
                link = entry.link

                msg = (
                    f"<b>{source}</b>\n"
                    f"<a href='{link}'>{title}</a>\n\n"
                    f"{summary}"
                )

                try:
                    bot.send_message(CHAT_ID, msg, parse_mode="HTML", disable_web_page_preview=False)
                    rates = get_rates()
                    bot.send_message(CHAT_ID, f"üí± <b>–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç:</b>\n{rates}", parse_mode="HTML")
                    print(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {title}")
                except Exception as e:
                    print(f"[SEND ERROR] {e}")
                return

# === –ö–æ–º–∞–Ω–¥–∞ /news
@bot.message_handler(commands=['news'])
def manual_news(message):
    if str(message.chat.id) != str(CHAT_ID).replace("@", ""):
        return
    fetch_and_send_news()

# === –ö–æ–º–∞–Ω–¥–∞ /add
@bot.message_handler(commands=['add'])
def add_custom_news(message):
    if str(message.chat.id) != str(CHAT_ID).replace("@", ""):
        return
    msg = message.text.replace("/add", "").strip()
    if not msg:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /add")
    else:
        bot.send_message(CHAT_ID, f"üì∞ <b>–ê–≤—Ç–æ—Ä—Å—å–∫–∞ –Ω–æ–≤–∏–Ω–∞:</b>\n\n{msg}", parse_mode="HTML")
        rates = get_rates()
        bot.send_message(CHAT_ID, f"üí± <b>–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç:</b>\n{rates}", parse_mode="HTML")

# === –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —â–æ–≥–æ–¥–∏–Ω–∏
schedule.every(1).hours.do(fetch_and_send_news)

# === –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    fetch_and_send_news()
    while True:
        schedule.run_pending()
        time.sleep(60)
        bot.polling(none_stop=True)